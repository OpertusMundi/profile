---

kind: pipeline
type: docker
name: default

environment:
  DATABASE_HOST: postgis-1
  DATABASE_PORT: '5432'
  DATABASE_NAME: profile
  DATABASE_USER: tester1

#
# Steps
#

steps:

- name: setup-postgis
  image: postgres:9.6-alpine
  when:
    event:
    - push
  environment:
    DATABASE_POSTGRES_PASSWORD:
      from_secret: database_postgres_password
    DATABASE_PASSWORD:
      from_secret: database_password
  commands:
  # Wait for database server to be ready
  - export PGHOST=$${DATABASE_HOST} PGPORT=$${DATABASE_PORT}
  - (t=30; while ! pg_isready -U postgres -t 5; do t=$((t - 1)); test $${t} -ne 0; sleep 4s; done)
  # Setup client
  - touch ~/.pgpass
  - chmod og-rwx ~/.pgpass
  - echo "$${DATABASE_HOST}:$${DATABASE_PORT}:*:postgres:$${DATABASE_POSTGRES_PASSWORD}" >> ~/.pgpass
  - echo "$${DATABASE_HOST}:$${DATABASE_PORT}:$${DATABASE_NAME}:$${DATABASE_USER}:$${DATABASE_PASSWORD}" >> ~/.pgpass
  # Create user/database for tests
  - echo "CREATE USER \"$${DATABASE_USER}\" WITH PASSWORD '$${DATABASE_PASSWORD}'" | psql -U postgres
  - echo "CREATE DATABASE \"$${DATABASE_NAME}\" WITH OWNER \"$${DATABASE_USER}\"" | psql -U postgres
  - psql -U postgres -l -A -t
  - psql -U $${DATABASE_USER} -d $${DATABASE_NAME} -A -t -c '\d'

- name: nosetests
  image: docker:19.03-dind
  when:
    event:
    - push
  volumes:
  - name: docker_socket
    path: /var/run
  environment:
    DOCKER_HOST: unix:///var/run/docker.sock
    DATABASE_PASSWORD:
      from_secret: database_password
  commands:
  - export image=opertusmundi/geoprofile:${DRONE_COMMIT}-testing
  - (t=10; while ! docker info -f '{{.ID}}' 2>/dev/null; do t=$((t - 1)); test $${t} -ne 0; sleep 1; done)
  - docker build . -f testing.dockerfile --build-arg VERSION=${DRONE_COMMIT} -t $${image}
  - mkdir output data temp && chown -v 1000:1000 output data temp
  - export env_file=nosetests-${CI_BUILD_NUMBER}.env
  - >-
    (env -i
    TEMPDIR=/work/temp
    INPUT_DIR=/work/input
    OUTPUT_DIR=/work/output
    INSTANCE_PATH=/work/data
    DB_ENGINE=postgresql
    DB_HOST=$${DATABASE_HOST}
    DB_PORT=$${DATABASE_PORT}
    DB_USER=$${DATABASE_USER}
    DB_NAME=$${DATABASE_NAME}
    DB_PASS=$${DATABASE_PASSWORD}
    ) | tee $${env_file}
  - docker run --rm -u 1000:1000 -v $PWD:/work -w /work --env-file $${env_file} --network host $${image} -v -s

- name: prepare-tags
  image: busybox:1.32
  when:
    event:
    - tag
  commands:
  - tags_file=$(mktemp) 
  - echo ${DRONE_TAG} | grep -e '^[0-9]\+[.][0-9]\+[.][0-9]\+\([_-][a-z0-9][-.a-z0-9]*\)\?$' | tee -a $${tags_file}
  - echo ${DRONE_TAG} | grep -o -e '^[0-9]\+[.][0-9]\+[.][0-9]\+' | tee -a $${tags_file}
  - cat $${tags_file} | xargs echo | tr '[:blank:]' ',' | tr -d '\n' | tee .tags && echo

- name: publish-image-1
  image: plugins/docker
  when:
    event:
    - tag
  settings:
    debug: true
    username: 
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: opertusmundi/profile
    mirror: http://registry-mirror:5000
    build_args:
    - VERSION=${DRONE_TAG}

- name: publish-image-2
  image: plugins/docker
  when:
    event:
    - tag
  settings:
    debug: true
    username: 
      from_secret: registry_username
    password:
      from_secret: registry_password
    repo: registry-dev-1-opertusmundi:30474/opertusmundi/profile
    mirror: http://registry-mirror:5000
    registry: registry-dev-1-opertusmundi:30474
    build_args:
    - VERSION=${DRONE_TAG}

#
# Services
#

services:

- name: docker
  image: docker:19.03-dind
  privileged: true
  command:
  - --registry-mirror=http://registry-mirror:5000
  volumes:
  - name: docker_socket
    path: /var/run

- name: postgis-1
  image: postgis/postgis:9.6-2.5-alpine
  environment:
    POSTGRES_PASSWORD:
      from_secret: database_postgres_password


volumes:
- name: docker_socket
  temp: {}

